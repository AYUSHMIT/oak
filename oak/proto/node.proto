//
// Copyright 2018 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak;

message InvokeRequest {
  // Raw data to pass as input to the Oak Module invocation.
  // Consumed by the Oak Module via the `oak.read` host function.
  bytes data = 1;
}

message InvokeResponse {
  // Raw data received as output from the Oak Module invocation.
  // Produced by the Oak Module via the `oak.write` host function.
  bytes data = 1;
}

// An Oak Node is an instance of an Oak Module an Oak VM, usually running within
// an enclave.
service Node {
  // Interact with the Oak Node by passing some data in and possibly expecting
  // some data out.
  //
  // May be called multiple times; in case of concurrent invocations, the Oak VM
  // serializes the invocations so that they do not overlap, by waiting for the
  // previous invocation(s) to complete before processing a new invocation.
  // Invocations are not guaranteed to terminate, and the Oak VM makes no
  // guarantees about how much time each invocation is allowed to run for.
  //
  // This results in the `oak_invoke` exported function being invoked on the Oak
  // Module.
  //
  // TODO: Modulate completion time so that it is constant or at least quantized
  // so that it cannot be used as side / covert channel by malicious modules to
  // exfiltrate data.
  rpc Invoke(InvokeRequest) returns (InvokeResponse);
}
