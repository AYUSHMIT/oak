//
// Copyright 2018 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak;

message InitiateComputationRequest {
  bytes business_logic = 1;
  string expression = 2;

  repeated Input inputs = 3;
  repeated Channel output_channels = 4;
}

message InitiateComputationResponse {
  string value = 1;
}

message Input {
  // Name to use to refer to this input from the business logic.
  // Must be unique among other input names.
  string name = 1;

  oneof data {
    bytes inline_data = 2;
    Channel channel = 3;
  }
}

message Output {
  // Name to use to refer to this output from the business logic.
  // Must be unique among other output names.
  string name = 1;

  oneof data {
    Channel channel = 2;
  }
}

message Channel {
  // Address of the endpoint providing the data.
  // hostname:port or IP:port format.
  string address = 1;

  PlatformIdentityRequirementRule platform_identity_requirement_rule = 2;
}

// Requirement for the remote platform to possess a certificate.
message CertIdentityRequirement {
  bytes signature = 1;
}

// Requirement for the remote platform to be an Intel SGX enclave.
// See https://software.intel.com/en-us/node/702979.
message IntelSgxEnclaveIdentityRequirement {
  bytes measurement = 1;
}

message PlatformIdentityRequirement {
  oneof identity_requirement {
    CertIdentityRequirement cert_identity_requirement = 1;
    IntelSgxEnclaveIdentityRequirement intel_sgx_enclave_identity_requirement = 2;
  }
}

// Rule defining allowed platform identities.
// Expressed in Disjunctive Normal Form (OR of ANDs).
message PlatformIdentityRequirementRule {
  message PlatformIdentityRequirementClause {
    repeated PlatformIdentityRequirement platform_identity_requirements = 1;
  }
  repeated PlatformIdentityRequirementClause clauses = 1;
}

service OakServer {
  rpc InitiateComputation(InitiateComputationRequest) returns (InitiateComputationResponse);
}
