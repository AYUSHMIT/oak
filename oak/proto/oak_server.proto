//
// Copyright 2018 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak;

message InitiateComputationRequest {
  // The compiled code of the Oak Module to instantiate, in WebAssembly binary
  // format.
  // See https://webassembly.org/docs/binary-encoding/ .
  bytes module = 1;
}

message InitiateComputationResponse {
}

// Requirement for the remote platform to possess a certificate.
message CertIdentityRequirement {
  bytes signature = 1;
}

// Requirement for the remote platform to be an Intel SGX enclave.
// See https://software.intel.com/en-us/node/702979.
message IntelSgxEnclaveIdentityRequirement {
  bytes measurement = 1;
}

message PlatformIdentityRequirement {
  oneof identity_requirement {
    CertIdentityRequirement cert_identity_requirement = 1;
    IntelSgxEnclaveIdentityRequirement intel_sgx_enclave_identity_requirement = 2;
  }
}

// Rule defining allowed platform identities.
// Expressed in Disjunctive Normal Form (OR of ANDs).
message PlatformIdentityRequirementRule {
  message PlatformIdentityRequirementClause {
    repeated PlatformIdentityRequirement platform_identity_requirements = 1;
  }
  repeated PlatformIdentityRequirementClause clauses = 1;
}

message InvokeRequest {
  // Raw data to pass as input to the Oak Module invocation.
  // Consumed by the Oak Module via the `oak.read` host function.
  bytes data = 1;
}

message InvokeResponse {
  // Raw data received as output from the Oak Module invocation.
  // Produced by the Oak Module via the `oak.write` host function.
  bytes data = 1;
}

// OakServer is conceptually similar to
// https://github.com/google/asylo/blob/5ec0af9fca8ce564435eb87d888a8fcc55805aa1/asylo/platform/core/trusted_application.h
service OakServer {
  // Initializes the Oak Module for subsequent invocations.
  //
  // Must be called before Invoke.
  //
  // TODO: Rename to Initialize.
  rpc InitiateComputation(InitiateComputationRequest) returns (InitiateComputationResponse);

  // Interact with the Oak Module by passing some data in and possibly expecting
  // some data out.
  //
  // Must be called after Initialize.
  //
  // May be called multiple times; in case of concurrent invocations, the Oak VM
  // serializes the invocations so that they do not overlap, by waiting for the
  // previous invocation(s) to complete before processing a new invocation.
  // Invocations are not guaranteed to terminate, and the Oak VM makes no
  // guarantees about how much time each invocation is allowed to run for.
  //
  // This results in the `oak_invoke` exported function being invoked on the Oak
  // Module.
  //
  // TODO: Modulate completion time so that it is constant or at least quantized
  // so that it cannot be used as side / covert channel by malicious modules to
  // exfiltrate data.
  rpc Invoke(InvokeRequest) returns (InvokeResponse);

  // TODO: Add Finalize.
}
